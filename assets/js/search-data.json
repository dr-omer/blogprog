{
  
    
        "post0": {
            "title": "Image Transformations",
            "content": "Activating Project . As always, we will activate an environment for this small project. We will follow below steps . Verify if we are in correct folder | Activate current environment | See what packages are installed and if need be install more packages. | . @show basename(pwd()) using Pkg Pkg.activate(&quot;.&quot;) @show keys(Pkg.project().dependencies) . basename(pwd()) = &#34;ImageProcessing&#34; keys((Pkg.project()).dependencies) = [&#34;Images&#34;, &#34;GLMakie&#34;, &#34;TestImages&#34;, &#34;VideoIO&#34;] . Activating project at `~/website/Julia_Projects/ImageProcessing` . KeySet for a Dict{String, Base.UUID} with 4 entries. Keys: &#34;Images&#34; &#34;GLMakie&#34; &#34;TestImages&#34; &#34;VideoIO&#34; . Let&#39;s add a OffsetArrays package we shall later use for padded view. . Pkg.add(&quot;OffsetArrays&quot;) . Updating registry at `~/.julia/registries/General.toml` Resolving package versions... Updating `~/website/Julia_Projects/ImageProcessing/Project.toml` [6fe1bfb0] + OffsetArrays v1.12.1 Updating `~/website/Julia_Projects/ImageProcessing/Manifest.toml` [6fe1bfb0] ↑ OffsetArrays v1.11.0 ⇒ v1.12.1 . As all the required packages are installed, let&#39;s move on to applying spatial transformations to images. . Cropping | Scaling | Rotation | Translation | . Let&#39;s import required libraries and load a test image lighthouse . using Images, TestImages, OffsetArrays img = testimage(&quot;lighthouse.png&quot;) . Size of image: . img_sz = size(img) . (512, 768) . Cropping of Image . Images are treated as matrices. By providing indices, we can extract or display portion of the image. . Let&#39;s consider a problem of cropping the light house from above picture. To do so, we need to provide correct indices range in image coordinate system . Important: In image coordinate system, origin is top-left corner. To provide a range in rows and column we use following notation . rows[start index : stop index, start index : stop index] . The : sign is showing the continuity, so for example 10:15 mean index value 10,11,12,13,14,15 . To extract the light house from above image, we provide the $y$/height (50:320) and $x$/width (300:400) coordinates . img[50:320,300:400] # cropping lighthouse image . One can also save cropped image. . img_crpd = img[50:320,300:400] . Size of cropped image is different than size of original/source image . println(&quot;Size of Cropped Image: $(size(img_crpd))&quot;) println(&quot;Size of Original Image: $(size(img))&quot;) . . Tip: $ sign in string parses integer output to sting output . We can also have preserve the size of cropped image same as original image by using PaddedView function . img_pv = PaddedView( zero(eltype(img)), OffsetArray(img_crpd, OffsetArrays.Origin(50,300)), axes(img)) . . Tip: mosaicview() function provides convenient way to see multiple images in same line (row or column) . mosaicview(img, img_pv, img_crpd, nrow=1) . PaddedView() functions takes three arguments fillvalue, data , and padded_axes . Following table gives mapping of what function expects and what user/programmer has supplied. . Function argument User/Programmer supplied argument . fillvalue | zero(eltype(img)) | . data | OffsetArray(img_crpd, OffsetArrays.Origin(50,300)) | . padded_axes | axes(img) | . Let&#39;s decipher these arguments . zero(eltype(img)) $ rightarrow$ creates a matrix of zero with element type (eltype) same as image element/pixel type | OffsetArray(img_crpd, OffsetArrays.Origin(50,300)) $ rightarrow$ creates an offset matrix with cropped data offset by 50 pixels in row and 300 pixels in column | axes(img) $ rightarrow$ Apply padding to image axes (Base.OneTo(512), Base.OneTo(768)) | . As seen below, both original and padded image are of same size, while cropped image is of smaller size. . println(&quot;Size of Original Image: $(size(img))&quot;) println(&quot;Size of Padded_View Image: $(size(img_pv))&quot;) println(&quot;Size of Cropped Image: $(size(img_crpd))&quot;) . size(img), size(img_pv), size(img_crpd) . ((512, 768), (512, 768), (271, 101)) . Scaling of Image . We can also scale/resize image easily using resize() function. We simply supply scale ratio value. . A ratio value of 0.5 means half of the original size (512 x 0.5, 768 x 0.5) | A ratio value of 2 means double of the original size (512 x 2, 768 x 2) | . img_rs = imresize(img, ratio = 0.5) size(img), size(img_rs) . ((512, 768), (256, 384)) . img_rs = imresize(img, ratio = 2) size(img), size(img_rs) . ((512, 768), (1024, 1536)) . One can also scale using percentage or specific dimension; . Scaling using percentage: | . scale_prct = 0.6 sz_new = trunc.(Int, size(img) .* scale_prct) img_rs = imresize(img, sz_new) size(img), size(img_rs), sz_new . ((512, 768), (307, 460), (307, 460)) . . Note: . indicates element-wise operation for trunc() function and * operator . Scaling using specific dimension | . wdth_new = 460 scale_prct = wdth_new / size(img,2) sz_new = trunc.(Int, size(img) .* scale_prct) img_rs = imresize(img, sz_new) size(img), size(img_rs), sz_new, scale_prct . ((512, 768), (306, 460), (306, 460), 0.5989583333333334) . . Note: In above examples, I am using last lines to print useful information for diagnostic purposes (e.g., size of original and rescaled image etc., ). In practice, it is useful to see numbers for verification of the applied operation. . Rotation of image . We can also rotate image . 90 $ text{ textdegree}$ anti-clockwise rotation: $- pi$/2 | 45 $ text{ textdegree}$ anti-clockwise rotation: $- pi$/4 | 90 $ text{ textdegree}$ clockwise rotation: $ pi$/2 | 45 $ text{ textdegree}$ clockwise rotation: $ pi$/4 | . imrotate(img,-π/2) . . Tip: In julia pi + tab translates to $ pi$ . img_rot = imrotate(img,π/3) . size(img), size(img_rot) . ((512, 768), (922, 828)) . As seen above, rotated image is of different size. Padding is automatically applied appropriately to compensate for small rotations. . Translation of Image . For this we again take help from our PaddedView() function . Translation of 200 pixels in y-direction (rows) | . img_trns = PaddedView( zero(eltype(img)), OffsetArray(img, OffsetArrays.Origin(200,0)), axes(img)) . As seen below size of both original and translated image is same. . size(img), size(img_trns) . ((512, 768), (512, 768)) . Translation of 350 pixels in x-direction (columns) | . img_trns = PaddedView( zero(eltype(img)), OffsetArray(img, OffsetArrays.Origin(0,350)), axes(img)) . Translation in both x and y direction | . img_trns = PaddedView( zero(eltype(img)), OffsetArray(img, OffsetArrays.Origin(200,350)), axes(img)) . Again size is same... . size(img), size(img_trns) . ((512, 768), (512, 768)) . Great! This concludes the tutorial on applying spatial transformation on Image. See you next time... . VERSION . v&#34;1.7.2&#34; .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/julia/spatial-transformations/cropping/scaling/rotation/translation/2022/05/31/Image-Transformations.html",
            "relUrl": "/jupyter/julia/spatial-transformations/cropping/scaling/rotation/translation/2022/05/31/Image-Transformations.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Reading and Displaying Images",
            "content": "Activating Project Environment . As always, we will activate a separate environment for this small project. We will follow below steps . Verify if we are in correct folder | Activate current environment | See what packages are installed and if need be install more packages. . Tip: Ideally, for new activated project folder, there won&#8217;t be any installed packages. | . @show basename(pwd()) using Pkg Pkg.activate(&quot;.&quot;) @show keys(Pkg.project().dependencies) . basename(pwd()) = &#34;ImageProcessing&#34; keys((Pkg.project()).dependencies) = [&#34;Images&#34;, &#34;GLMakie&#34;, &#34;TestImages&#34;, &#34;VideoIO&#34;] . Activating project at `~/website/Julia_Projects/ImageProcessing` . KeySet for a Dict{String, Base.UUID} with 4 entries. Keys: &#34;Images&#34; &#34;GLMakie&#34; &#34;TestImages&#34; &#34;VideoIO&#34; . . Tip: @show is a macro that prints expression and its result on stdout. . The first line shows correct folder ImageProcessing . The next two lines/commands using... and Pkg... activate&#39;s the current project environment. Usually, this means that we are asking julia to recognize the current project folder. From this point onwards, all addition/deletion of packages will be reflected in local .toml files. . The next line keys... shows what packages are currently installed in the environment. . As two key packages Images and TestImages are already installed, so we won&#39;t be installing any new packages. However, if they hadn&#39;t been installed, we would have issued following command to add them. . Pkg.add([&quot;Images&quot;,&quot;TestImages&quot;]); # add the Images package . Updating registry at `~/.julia/registries/General.toml` Resolving package versions... Installed StringDistances ─ v0.11.2 Installed TestImages ────── v1.6.2 Updating `~/website/Julia_Projects/Basic Image Processing/Project.toml` [5e47fb64] + TestImages v1.6.2 Updating `~/website/Julia_Projects/Basic Image Processing/Manifest.toml` [88034a9c] + StringDistances v0.11.2 [5e47fb64] + TestImages v1.6.2 Precompiling project... ✓ StringDistances ✓ TestImages 2 dependencies successfully precompiled in 3 seconds (117 already precompiled) . Basics of Image Loading and Display . After setting up the environment, we now move to importing libraries. . using Images, TestImages . Now let&#39;s load test image lighthouse.png. The package TestImages conveniently provides us with many legacy test images from image processing domain. . img = testimage(&quot;lighthouse.png&quot;) . In jupyter notebook, images will be displayed by default after loading. Now to see the image dimensions, let&#39;s use size function . As per Julia Images documentation for displaying images, there are several ways to display images. For jupyter notebook, ImageShow package (loaded as default when using Images) is used. . size(img) . (512, 768) . The above output shows that light house image has a width of 768 pixels and a height of height of 512 pixels. Alternatively, we can also state that image has 512 rows and 768 columns. . Note: Following notation/terminology is analogous to each other. We frequently reference them in text interchangeably. Also note usage of square bracket [ ] to access image element/pixel. . image[y,x] | image[height,width] | image[rows,cols] | image [argument_1,argument_2,argument_3] | image[1st_dimension,2nd_dimension,3rd_dimension] | image[Channel_1,Channel_2,Channel_3] . Tip: Usually, square bracket [ ] are used for matrices and round brackets ( ) are used for functions. | . To see the pixel values there are two ways: . using R,G,B functions - this may be used to inspect color value of single pixel | using matrix notation - this may be used to inspect color value of single or multiple pixels | . using R,G,B functions: . @show red(img[1,1]), green(img[1,1]), blue(img[1,1]) @show red(img[end,end]), green(img[end,end]), blue(img[end,end]) . (red(img[1, 1]), green(img[1, 1]), blue(img[1, 1])) = (0.361N0f8, 0.486N0f8, 0.6N0f8) (red(img[end, end]), green(img[end, end]), blue(img[end, end])) = (0.0N0f8, 0.0N0f8, 0.0N0f8) . (0.0N0f8, 0.0N0f8, 0.0N0f8) . The first line is showing R,G,B value for top-left pixel while second line is showing R,G,B value of bottom right pixel (conveniently accessed with keyword end). . We are showing output in form of tuple as we have combined the functions red(), green(), blue(). This is just done for the convenience; to show the output in single line. . using Matrix notation: . We add third argument : to see the pixel values: . @show img[1:1,1:1,:] img[1:5,1:5,:] . img[1:1, 1:1, :] = [RGB(0.361, 0.486, 0.6);;;] . 5×5×1 Array{RGB{N0f8}, 3}: [:, :, 1] = RGB(0.361, 0.486, 0.6) … RGB(0.369, 0.506, 0.616) RGB(0.361, 0.486, 0.6) RGB(0.361, 0.498, 0.608) RGB(0.376, 0.514, 0.624) RGB(0.369, 0.506, 0.616) RGB(0.365, 0.498, 0.62) RGB(0.353, 0.49, 0.608) RGB(0.365, 0.498, 0.627) RGB(0.365, 0.498, 0.62) . Type of image pixels is Array{RGB{N0f8},3}. Let&#39;s decipher this . Array{RGB{*},3} $ rightarrow$ three dimensional array (corresponding to R, G, B channels) | N0f8 $ rightarrow$ normalized with 8 fractional bits, with 0 bits left for representing values higher than 1. In simple words 8 bit resolution is available to represent color variations in each channel(R,G,B) | . If we omit the third argument we will see a sub image. . img[1:1,1:1] . img[1:5,1:5] . Great! This tutorial ends here. See you in next tutorial. . VERSION . v&#34;1.7.2&#34; .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/julia/reading/display/basics/2022/05/24/Image-Reading-and-Display.html",
            "relUrl": "/jupyter/julia/reading/display/basics/2022/05/24/Image-Reading-and-Display.html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Activating Project Environment",
            "content": "Every julia project can has it&#39;s own environment just as python. In jupyter notebook, the environment can be activated by importing Pkg - a julia package management system . First, let&#39;s ensure we are in correct directory. . basename(pwd()) # the last part of the directory. . &#34;ImageProcessing&#34; . This seems correct as I am hosting this code file in ImageProcessing Folder. Now let&#39;s go ahead with activating the environment. . using Pkg Pkg.activate(&quot;.&quot;) . Activating new project at `~/Downloads/ImageProcessing` . To see currently installed packages in ImageProcessing environment, lets issue a command installed . Pkg.project() . Pkg.API.ProjectInfo(nothing, nothing, nothing, false, Dict{String, Base.UUID}(), &#34;/Users/omer/Downloads/ImageProcessing/Project.toml&#34;) . As show above, we don&#39;t have anything installed here. So let&#39;s install Images package . Pkg.add(&quot;Images&quot;) . Updating registry at `~/.julia/registries/General.toml` Resolving package versions... Installed ImageIO ────────── v0.6.5 Installed ImageShow ──────── v0.3.6 Installed IntervalSets ───── v0.6.2 Installed ColorVectorSpace ─ v0.9.9 Installed TiffImages ─────── v0.4.3 Installed SpecialFunctions ─ v2.1.5 Installed OffsetArrays ───── v1.12.1 Installed LogExpFunctions ── v0.3.15 Installed ImageMorphology ── v0.3.2 Installed Compat ─────────── v4.1.0 Installed LazyModules ────── v0.3.0 Installed ColorTypes ─────── v0.11.3 Installed ChainRulesCore ─── v1.15.0 Installed Graphs ─────────── v1.5.0 Updating `~/Downloads/ImageProcessing/Project.toml` [916415d5] + Images v0.25.2 Updating `~/Downloads/ImageProcessing/Manifest.toml` [621f4979] + AbstractFFTs v1.1.0 [79e6a3ab] + Adapt v3.3.3 [ec485272] + ArnoldiMethod v0.2.0 [13072b0f] + AxisAlgorithms v1.0.1 [39de3d68] + AxisArrays v0.4.5 [fa961155] + CEnum v0.4.2 [49dc2e85] + Calculus v0.5.1 [aafaddc9] + CatIndices v0.2.2 [d360d2e6] + ChainRulesCore v1.15.0 [9e997f8a] + ChangesOfVariables v0.1.3 [aaaa29a8] + Clustering v0.14.2 [3da002f7] + ColorTypes v0.11.3 [c3611d14] + ColorVectorSpace v0.9.9 [5ae59095] + Colors v0.12.8 [34da2185] + Compat v4.1.0 [ed09eef8] + ComputationalResources v0.3.2 [150eb455] + CoordinateTransformations v0.6.2 [dc8bdbbb] + CustomUnitRanges v1.0.2 [9a962f9c] + DataAPI v1.10.0 [864edb3b] + DataStructures v0.17.20 [b4f34e82] + Distances v0.10.7 [ffbed154] + DocStringExtensions v0.8.6 [fa6b7ba4] + DualNumbers v0.6.8 [4f61f5a4] + FFTViews v0.3.2 [7a1cc6ca] + FFTW v1.4.6 [5789e2e9] + FileIO v1.14.0 [53c48c17] + FixedPointNumbers v0.8.4 [a2bd30eb] + Graphics v1.1.1 [86223c79] + Graphs v1.5.0 [2803e5a7] + ImageAxes v0.6.10 [c817782e] + ImageBase v0.1.5 [f332f351] + ImageContrastAdjustment v0.3.10 [a09fc81d] + ImageCore v0.9.3 [51556ac3] + ImageDistances v0.2.15 [6a3955dd] + ImageFiltering v0.7.1 [82e4d734] + ImageIO v0.6.5 [6218d12a] + ImageMagick v1.2.1 [bc367c6b] + ImageMetadata v0.9.8 [787d08f9] + ImageMorphology v0.3.2 [2996bd0c] + ImageQualityIndexes v0.3.0 [80713f31] + ImageSegmentation v1.7.0 [4e3cecfd] + ImageShow v0.3.6 [02fcd773] + ImageTransformations v0.9.4 [916415d5] + Images v0.25.2 [9b13fd28] + IndirectArrays v1.0.0 [d25df0c9] + Inflate v0.1.2 [1d092043] + IntegralArrays v0.1.4 [a98d9a8b] + Interpolations v0.13.6 [8197267c] + IntervalSets v0.6.2 [3587e190] + InverseFunctions v0.1.4 [92d709cd] + IrrationalConstants v0.1.1 [c8e1da08] + IterTools v1.4.0 [033835bb] + JLD2 v0.4.22 [692b3bcd] + JLLWrappers v1.4.1 [b835a17e] + JpegTurbo v0.1.1 [8cdb02fc] + LazyModules v0.3.0 [2ab3a3ac] + LogExpFunctions v0.3.15 [1914dd2f] + MacroTools v0.5.9 [dbb5928d] + MappedArrays v0.4.1 [626554b9] + MetaGraphs v0.7.1 [e1d29d7a] + Missings v1.0.2 [e94cdb99] + MosaicViews v0.3.3 [77ba4419] + NaNMath v0.3.7 [b8a86587] + NearestNeighbors v0.4.10 [f09324ee] + Netpbm v1.0.2 [6fe1bfb0] + OffsetArrays v1.12.1 [52e1d378] + OpenEXR v0.3.2 [bac558e1] + OrderedCollections v1.4.1 [f57f5aa1] + PNGFiles v0.3.16 [5432bcbf] + PaddedViews v0.5.11 [d96e819e] + Parameters v0.12.3 [eebad327] + PkgVersion v0.1.1 [21216c6a] + Preferences v1.3.0 [92933f4c] + ProgressMeter v1.7.2 [4b34888f] + QOI v1.0.0 [94ee1d12] + Quaternions v0.5.6 [b3c3ace0] + RangeArrays v0.3.2 [c84ed2f1] + Ratios v0.4.3 [189a3867] + Reexport v1.2.2 [dee08c22] + RegionTrees v0.3.2 [ae029012] + Requires v1.3.0 [6038ab10] + Rotations v1.3.1 [699a6c99] + SimpleTraits v0.9.4 [47aef6b3] + SimpleWeightedGraphs v1.2.1 [45858cf5] + Sixel v0.1.2 [a2af1166] + SortingAlgorithms v1.0.1 [276daf66] + SpecialFunctions v2.1.5 [cae243ae] + StackViews v0.1.1 [90137ffa] + StaticArrays v1.4.4 [82ae8749] + StatsAPI v1.3.0 [2913bbd2] + StatsBase v0.33.16 [62fd8b95] + TensorCore v0.1.1 [731e570b] + TiffImages v0.4.3 [06e1c1a7] + TiledIteration v0.3.1 [3bb67fe8] + TranscodingStreams v0.9.6 [3a884ed6] + UnPack v1.0.2 [efce3f68] + WoodburyMatrices v0.5.5 [f5851436] + FFTW_jll v3.3.10+0 [61579ee1] + Ghostscript_jll v9.55.0+0 [c73af94c] + ImageMagick_jll v6.9.12+2 [905a6f67] + Imath_jll v3.1.2+0 [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+2 [aacddb02] + JpegTurbo_jll v2.1.2+0 [88015f11] + LERC_jll v3.0.0+1 [89763e89] + Libtiff_jll v4.3.0+1 [856f044c] + MKL_jll v2022.0.0+0 [18a262bb] + OpenEXR_jll v3.1.1+0 [efe28fd5] + OpenSpecFun_jll v0.5.5+0 [3161d3a3] + Zstd_jll v1.5.2+0 [b53b4c65] + libpng_jll v1.6.38+0 [075b6546] + libsixel_jll v1.8.6+1 [0dad84c5] + ArgTools [56f22d72] + Artifacts [2a0f44e3] + Base64 [ade2ca70] + Dates [8ba89e20] + Distributed [f43a241f] + Downloads [b77e0a4c] + InteractiveUtils [4af54fe1] + LazyArtifacts [b27032c2] + LibCURL [76f85450] + LibGit2 [8f399da3] + Libdl [37e2e46d] + LinearAlgebra [56ddb016] + Logging [d6f4376e] + Markdown [a63ad114] + Mmap [ca575930] + NetworkOptions [44cfe95a] + Pkg [de0858da] + Printf [3fa0cd96] + REPL [9a3f8284] + Random [ea8e919c] + SHA [9e88b42a] + Serialization [1a1011a3] + SharedArrays [6462fe0b] + Sockets [2f01184e] + SparseArrays [10745b16] + Statistics [fa267f1f] + TOML [a4e569a6] + Tar [8dfed614] + Test [cf7118a7] + UUIDs [4ec0a83e] + Unicode [e66e0078] + CompilerSupportLibraries_jll [deac9b47] + LibCURL_jll [29816b5a] + LibSSH2_jll [c8ffd9c3] + MbedTLS_jll [14a3606d] + MozillaCACerts_jll [4536629a] + OpenBLAS_jll [05823500] + OpenLibm_jll [83775a58] + Zlib_jll [8e850b90] + libblastrampoline_jll [8e850ede] + nghttp2_jll [3f19e933] + p7zip_jll Precompiling project... ✓ LazyModules ✓ OffsetArrays ✓ IntervalSets ✓ Compat ✓ PaddedViews ✓ DataStructures ✓ TiledIteration ✓ CatIndices ✓ StackViews ✓ AxisArrays ✓ SortingAlgorithms ✓ MosaicViews ✓ ChainRulesCore ✓ ChangesOfVariables ✓ AbstractFFTs ✓ LogExpFunctions ✓ Interpolations ✓ ColorTypes ✓ Graphs ✓ StatsBase ✓ FFTW ✓ QOI ✓ IntegralArrays ✓ FFTViews ✓ SimpleWeightedGraphs ✓ MetaGraphs ✓ SpecialFunctions ✓ Clustering ✓ DualNumbers ✓ Colors ✓ Quaternions ✓ Graphics ✓ ColorVectorSpace ✓ OpenEXR ✓ Rotations ✓ TiffImages ✓ ImageCore ✓ ImageMorphology ✓ Netpbm ✓ ImageBase ✓ JpegTurbo ✓ Sixel ✓ ImageDistances ✓ ImageMagick ✓ PNGFiles ✓ ImageShow ✓ ImageIO ✓ ImageAxes ✓ ImageTransformations ✓ ImageMetadata ✓ ImageContrastAdjustment ✓ ImageFiltering ✓ ImageQualityIndexes ✓ ImageSegmentation ✓ Images 55 dependencies successfully precompiled in 46 seconds (63 already precompiled) . Now let&#39;s again see which packages are installed in current environment ImageProcessing . keys(Pkg.project().dependencies) . KeySet for a Dict{String, Base.UUID} with 1 entry. Keys: &#34;Images&#34; . Perfect! . This is it for today. See you in next tutorial... . VERSION . v&#34;1.7.2&#34; .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/julia/environment/images/2022/05/23/Environment-Setup.html",
            "relUrl": "/jupyter/julia/environment/images/2022/05/23/Environment-Setup.html",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Basic Image Processing in Python",
            "content": "Mounting Google Drive . Mounting Google Drive. This is boilerplate code that will mount your Google Drive into you colab space and you will have access to all the files and folders in your Google Drive. . from google.colab import drive drive.mount(&#39;/content/drive/&#39;) . Mounted at /content/drive/ . Next I move into current directory. Since my code is hosted in Colab Notebooks (1) directory so I&#39;ll apply cd (change directory) to move into this folder. . cd &#39;drive/MyDrive/Colab Notebooks (1)/&#39; . The above directory is where all my google colab codes reside. In addition to the code, I also have dataset folder that will contain different datasets of images, text, tables etc. The idea is to have a consistent directroy structure across all my projects i.e., codes in parent folder and datasets in subfolder. . Importing Libraries . import cv2 as cv from google.colab.patches import cv2_imshow # to show images in colab. . Basic Image Display . img = cv.imread(&#39;Dataset/Images/python_logo.png&#39;) # reading image . cv2_imshow(img) # displaying image . The origin of Image is always top-left conrner as oppose to origin of graph (which is bottom left corner). . Images can be visualized/imagined as matrices. In 2D matrices we have rows and columns. We can access these rows and columns by specifying the start and stop numeric values [row_start:row_stop, col_start:col_stop]. . In the following example, we want to display first 500 rows and 500 columns of the image. . cv2_imshow(img[0:500, 0:500]) # showing only top left corner . We can also override the pixel values by assinging any numeric value between 0-255. In following code example . we first create a copy original image | overide the pixel values of first 500 rows and 500 columns by assigning and RGB colour value ( (b,g,r) with range of (0-255,0-255,0-255 ) for each color component. Please note that OpenCV color model is reversed (BGR) | img2 = img.copy() img2[0:500,0:500] = (0,0,255) cv2_imshow(cv.hconcat((img, img2))) # horizontally concatinating the images to see the differences . As seen the original image left is not changed and only copy (on the right) is changed. . We can also show a partial image either by . by cropping image | by showing portion of the image | . img2 = img[0:500,0:500].copy() # cropping image cv2_imshow(cv.hconcat((img[0:500,0:500],img2))) . As seen the left image is partial shown, while the right image is fully shown (albiet it was cropped when copying from original image). .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/python/opencv/image%20processing/2022/05/09/BasicImageProcessing-in-Python.html",
            "relUrl": "/jupyter/python/opencv/image%20processing/2022/05/09/BasicImageProcessing-in-Python.html",
            "date": " • May 9, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "An Example Markdown Post",
          "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
          "url": "https://omergilani.github.io/prog4cm/2020-01-14-test-markdown-post.html",
          "relUrl": "/2020-01-14-test-markdown-post.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "Hi, My name is Syed Omer Gilani. I am an aspiring educator, avid reader, curious learner, keen programmer, ___ writer, and caring member of a wonderful family. I function as a tenured associate professor at a leading university in Pakistan in my day job. Outside my day job, I mostly read non-fiction, spend quality time with family and friends, and do programming (of mind and computer both!) . I started this blog to share what I have learned over the years and what I am learning now .",
          "url": "https://omergilani.github.io/prog4cm/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://omergilani.github.io/prog4cm/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}