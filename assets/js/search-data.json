{
  
    
        "post0": {
            "title": "Basic Image Procesisng in Julia",
            "content": "Activating project environment . Every julia project can has it&#39;s own environment just as python. In jupyter notebook, the environment can be activated by importing Pkg - a julia package management system . First, let&#39;s ensure we are in correct directory. . basename(pwd()) # the last part of the directory. . &#34;Basic Image Processing&#34; . This seems correct as I am hosting this code file in Basic Image Processing Folder. Now let&#39;s go ahead with activating the environment. . using Pkg Pkg.activate(&quot;.&quot;) . Activating project at `~/website/Julia_Projects/Basic Image Processing` . Now let&#39;s add required packages Images and TestImages to this environment . Pkg.add([&quot;Images&quot;,&quot;TestImages&quot;]); # add the Images package . Updating registry at `~/.julia/registries/General.toml` Resolving package versions... Installed StringDistances ─ v0.11.2 Installed TestImages ────── v1.6.2 Updating `~/website/Julia_Projects/Basic Image Processing/Project.toml` [5e47fb64] + TestImages v1.6.2 Updating `~/website/Julia_Projects/Basic Image Processing/Manifest.toml` [88034a9c] + StringDistances v0.11.2 [5e47fb64] + TestImages v1.6.2 Precompiling project... ✓ StringDistances ✓ TestImages 2 dependencies successfully precompiled in 3 seconds (117 already precompiled) . Importing Libraries . After setting up the environment, we now move to importing libraries. . using Images, TestImages . Now let&#39;s load test image lighthouse.png. The package TestImages conveniently provides us with many legacy test images from image processing domain. . img = testimage(&quot;lighthouse.png&quot;) . In jupyter notebook, images will be displayed by default after loading. Now to see the image dimensions, let&#39;s use size function . size(img) . (512, 768) . The above output shows that light house image has a width of 768 pixels and a height of height of 512 pixels. Alternatively, we can also state that image has 512 rows and 768 columns. . Important: Following notation are analogous to each other. We frequently reference them in text interchangeably. . Tip: image(height,width) $ rightarrow$ image(rows,cols) $ rightarrow$ image(1st dimension, 2nd dimension) $ rightarrow$ image(y,x) $ rightarrow$ image (argument 1, argument 2) . Cropping of Image: . Images are treated as matrices. By providing indices, we can extract or display portion of the image. . Let&#39;s consider a problem of cropping the light house from above picture. To do so, we need to provide correct indices range in image coordinate system . Important: In image coordinate system, origin is top-left corner. To provide a range in rows and column we use following notation . rows[start index : stop index, start index : stop index] . The : sign is showing the continuity, so for example 10:15 mean index value 10,11,12,13,14,15 . To extract the light house from above image, we provide the $y$/height (50:350) and $x$/width (300:400) coordinates . img[50:350,300:400] # cropping lighthouse image . Resizing image . We can also resize image easily. We simply supply ratio value. . A ratio value of 0.5 means half of original size (512 x 0.5, 768 x 0.5) | A ratio value of 2 means double of original size (512 x 2, 768 x 2) | . img_rs = imresize(img, ratio = 0.5) size(img_rs) . (256, 384) . Rotation of image . We can also rotate image . 90 $ text{ textdegree}$ anti-clockwise rotation: $- pi$/2 | 45 $ text{ textdegree}$ anti-clockwise rotation: $- pi$/4 | 90 $ text{ textdegree}$ clockwise rotation: $ pi$/2 | 45 $ text{ textdegree}$ clockwise rotation: $ pi$/4 | . imrotate(img,-π/2) . . Tip: In julia pi + tab translates to $ pi$ . Numeric value of pixel. . If we want to see the numeric value of pixel (value of R,G,B) then we need to add a third argument as :. . Note: With only two arguments, the image is displayed and numeric values are not displayed (see Cropping of Image). . img[1:5,1:5,:] # adding third argument . 5×5×1 Array{RGB{N0f8}, 3}: [:, :, 1] = RGB(0.361, 0.486, 0.6) … RGB(0.369, 0.506, 0.616) RGB(0.361, 0.486, 0.6) RGB(0.361, 0.498, 0.608) RGB(0.376, 0.514, 0.624) RGB(0.369, 0.506, 0.616) RGB(0.365, 0.498, 0.62) RGB(0.353, 0.49, 0.608) RGB(0.365, 0.498, 0.627) RGB(0.365, 0.498, 0.62) . If we need to only inspect single pixel, we can use color channel names as follows . red(img[1,1]), green(img[1,1]), blue(img[1,1]) . (0.361N0f8, 0.486N0f8, 0.6N0f8) . Compatibility . VERSION . v&#34;1.7.2&#34; .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/julia/image%20processing/2022/05/24/BasicImageProcessing-in-Julia.html",
            "relUrl": "/jupyter/julia/image%20processing/2022/05/24/BasicImageProcessing-in-Julia.html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Activating Project Environment",
            "content": "Every julia project can has it&#39;s own environment just as python. In jupyter notebook, the environment can be activated by importing Pkg - a julia package management system . First, let&#39;s ensure we are in correct directory. . basename(pwd()) # the last part of the directory. . &#34;ImageProcessing&#34; . This seems correct as I am hosting this code file in ImageProcessing Folder. Now let&#39;s go ahead with activating the environment. . using Pkg Pkg.activate(&quot;.&quot;) . Activating new project at `~/Downloads/ImageProcessing` . To see currently installed packages in ImageProcessing environment, lets issue a command installed . Pkg.project() . Pkg.API.ProjectInfo(nothing, nothing, nothing, false, Dict{String, Base.UUID}(), &#34;/Users/omer/Downloads/ImageProcessing/Project.toml&#34;) . As show above, we don&#39;t have anything installed here. So let&#39;s install Images package . Pkg.add(&quot;Images&quot;) . Updating registry at `~/.julia/registries/General.toml` Resolving package versions... Installed ImageIO ────────── v0.6.5 Installed ImageShow ──────── v0.3.6 Installed IntervalSets ───── v0.6.2 Installed ColorVectorSpace ─ v0.9.9 Installed TiffImages ─────── v0.4.3 Installed SpecialFunctions ─ v2.1.5 Installed OffsetArrays ───── v1.12.1 Installed LogExpFunctions ── v0.3.15 Installed ImageMorphology ── v0.3.2 Installed Compat ─────────── v4.1.0 Installed LazyModules ────── v0.3.0 Installed ColorTypes ─────── v0.11.3 Installed ChainRulesCore ─── v1.15.0 Installed Graphs ─────────── v1.5.0 Updating `~/Downloads/ImageProcessing/Project.toml` [916415d5] + Images v0.25.2 Updating `~/Downloads/ImageProcessing/Manifest.toml` [621f4979] + AbstractFFTs v1.1.0 [79e6a3ab] + Adapt v3.3.3 [ec485272] + ArnoldiMethod v0.2.0 [13072b0f] + AxisAlgorithms v1.0.1 [39de3d68] + AxisArrays v0.4.5 [fa961155] + CEnum v0.4.2 [49dc2e85] + Calculus v0.5.1 [aafaddc9] + CatIndices v0.2.2 [d360d2e6] + ChainRulesCore v1.15.0 [9e997f8a] + ChangesOfVariables v0.1.3 [aaaa29a8] + Clustering v0.14.2 [3da002f7] + ColorTypes v0.11.3 [c3611d14] + ColorVectorSpace v0.9.9 [5ae59095] + Colors v0.12.8 [34da2185] + Compat v4.1.0 [ed09eef8] + ComputationalResources v0.3.2 [150eb455] + CoordinateTransformations v0.6.2 [dc8bdbbb] + CustomUnitRanges v1.0.2 [9a962f9c] + DataAPI v1.10.0 [864edb3b] + DataStructures v0.17.20 [b4f34e82] + Distances v0.10.7 [ffbed154] + DocStringExtensions v0.8.6 [fa6b7ba4] + DualNumbers v0.6.8 [4f61f5a4] + FFTViews v0.3.2 [7a1cc6ca] + FFTW v1.4.6 [5789e2e9] + FileIO v1.14.0 [53c48c17] + FixedPointNumbers v0.8.4 [a2bd30eb] + Graphics v1.1.1 [86223c79] + Graphs v1.5.0 [2803e5a7] + ImageAxes v0.6.10 [c817782e] + ImageBase v0.1.5 [f332f351] + ImageContrastAdjustment v0.3.10 [a09fc81d] + ImageCore v0.9.3 [51556ac3] + ImageDistances v0.2.15 [6a3955dd] + ImageFiltering v0.7.1 [82e4d734] + ImageIO v0.6.5 [6218d12a] + ImageMagick v1.2.1 [bc367c6b] + ImageMetadata v0.9.8 [787d08f9] + ImageMorphology v0.3.2 [2996bd0c] + ImageQualityIndexes v0.3.0 [80713f31] + ImageSegmentation v1.7.0 [4e3cecfd] + ImageShow v0.3.6 [02fcd773] + ImageTransformations v0.9.4 [916415d5] + Images v0.25.2 [9b13fd28] + IndirectArrays v1.0.0 [d25df0c9] + Inflate v0.1.2 [1d092043] + IntegralArrays v0.1.4 [a98d9a8b] + Interpolations v0.13.6 [8197267c] + IntervalSets v0.6.2 [3587e190] + InverseFunctions v0.1.4 [92d709cd] + IrrationalConstants v0.1.1 [c8e1da08] + IterTools v1.4.0 [033835bb] + JLD2 v0.4.22 [692b3bcd] + JLLWrappers v1.4.1 [b835a17e] + JpegTurbo v0.1.1 [8cdb02fc] + LazyModules v0.3.0 [2ab3a3ac] + LogExpFunctions v0.3.15 [1914dd2f] + MacroTools v0.5.9 [dbb5928d] + MappedArrays v0.4.1 [626554b9] + MetaGraphs v0.7.1 [e1d29d7a] + Missings v1.0.2 [e94cdb99] + MosaicViews v0.3.3 [77ba4419] + NaNMath v0.3.7 [b8a86587] + NearestNeighbors v0.4.10 [f09324ee] + Netpbm v1.0.2 [6fe1bfb0] + OffsetArrays v1.12.1 [52e1d378] + OpenEXR v0.3.2 [bac558e1] + OrderedCollections v1.4.1 [f57f5aa1] + PNGFiles v0.3.16 [5432bcbf] + PaddedViews v0.5.11 [d96e819e] + Parameters v0.12.3 [eebad327] + PkgVersion v0.1.1 [21216c6a] + Preferences v1.3.0 [92933f4c] + ProgressMeter v1.7.2 [4b34888f] + QOI v1.0.0 [94ee1d12] + Quaternions v0.5.6 [b3c3ace0] + RangeArrays v0.3.2 [c84ed2f1] + Ratios v0.4.3 [189a3867] + Reexport v1.2.2 [dee08c22] + RegionTrees v0.3.2 [ae029012] + Requires v1.3.0 [6038ab10] + Rotations v1.3.1 [699a6c99] + SimpleTraits v0.9.4 [47aef6b3] + SimpleWeightedGraphs v1.2.1 [45858cf5] + Sixel v0.1.2 [a2af1166] + SortingAlgorithms v1.0.1 [276daf66] + SpecialFunctions v2.1.5 [cae243ae] + StackViews v0.1.1 [90137ffa] + StaticArrays v1.4.4 [82ae8749] + StatsAPI v1.3.0 [2913bbd2] + StatsBase v0.33.16 [62fd8b95] + TensorCore v0.1.1 [731e570b] + TiffImages v0.4.3 [06e1c1a7] + TiledIteration v0.3.1 [3bb67fe8] + TranscodingStreams v0.9.6 [3a884ed6] + UnPack v1.0.2 [efce3f68] + WoodburyMatrices v0.5.5 [f5851436] + FFTW_jll v3.3.10+0 [61579ee1] + Ghostscript_jll v9.55.0+0 [c73af94c] + ImageMagick_jll v6.9.12+2 [905a6f67] + Imath_jll v3.1.2+0 [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+2 [aacddb02] + JpegTurbo_jll v2.1.2+0 [88015f11] + LERC_jll v3.0.0+1 [89763e89] + Libtiff_jll v4.3.0+1 [856f044c] + MKL_jll v2022.0.0+0 [18a262bb] + OpenEXR_jll v3.1.1+0 [efe28fd5] + OpenSpecFun_jll v0.5.5+0 [3161d3a3] + Zstd_jll v1.5.2+0 [b53b4c65] + libpng_jll v1.6.38+0 [075b6546] + libsixel_jll v1.8.6+1 [0dad84c5] + ArgTools [56f22d72] + Artifacts [2a0f44e3] + Base64 [ade2ca70] + Dates [8ba89e20] + Distributed [f43a241f] + Downloads [b77e0a4c] + InteractiveUtils [4af54fe1] + LazyArtifacts [b27032c2] + LibCURL [76f85450] + LibGit2 [8f399da3] + Libdl [37e2e46d] + LinearAlgebra [56ddb016] + Logging [d6f4376e] + Markdown [a63ad114] + Mmap [ca575930] + NetworkOptions [44cfe95a] + Pkg [de0858da] + Printf [3fa0cd96] + REPL [9a3f8284] + Random [ea8e919c] + SHA [9e88b42a] + Serialization [1a1011a3] + SharedArrays [6462fe0b] + Sockets [2f01184e] + SparseArrays [10745b16] + Statistics [fa267f1f] + TOML [a4e569a6] + Tar [8dfed614] + Test [cf7118a7] + UUIDs [4ec0a83e] + Unicode [e66e0078] + CompilerSupportLibraries_jll [deac9b47] + LibCURL_jll [29816b5a] + LibSSH2_jll [c8ffd9c3] + MbedTLS_jll [14a3606d] + MozillaCACerts_jll [4536629a] + OpenBLAS_jll [05823500] + OpenLibm_jll [83775a58] + Zlib_jll [8e850b90] + libblastrampoline_jll [8e850ede] + nghttp2_jll [3f19e933] + p7zip_jll Precompiling project... ✓ LazyModules ✓ OffsetArrays ✓ IntervalSets ✓ Compat ✓ PaddedViews ✓ DataStructures ✓ TiledIteration ✓ CatIndices ✓ StackViews ✓ AxisArrays ✓ SortingAlgorithms ✓ MosaicViews ✓ ChainRulesCore ✓ ChangesOfVariables ✓ AbstractFFTs ✓ LogExpFunctions ✓ Interpolations ✓ ColorTypes ✓ Graphs ✓ StatsBase ✓ FFTW ✓ QOI ✓ IntegralArrays ✓ FFTViews ✓ SimpleWeightedGraphs ✓ MetaGraphs ✓ SpecialFunctions ✓ Clustering ✓ DualNumbers ✓ Colors ✓ Quaternions ✓ Graphics ✓ ColorVectorSpace ✓ OpenEXR ✓ Rotations ✓ TiffImages ✓ ImageCore ✓ ImageMorphology ✓ Netpbm ✓ ImageBase ✓ JpegTurbo ✓ Sixel ✓ ImageDistances ✓ ImageMagick ✓ PNGFiles ✓ ImageShow ✓ ImageIO ✓ ImageAxes ✓ ImageTransformations ✓ ImageMetadata ✓ ImageContrastAdjustment ✓ ImageFiltering ✓ ImageQualityIndexes ✓ ImageSegmentation ✓ Images 55 dependencies successfully precompiled in 46 seconds (63 already precompiled) . Now let&#39;s again see which packages are installed in current environment ImageProcessing . keys(Pkg.project().dependencies) . KeySet for a Dict{String, Base.UUID} with 1 entry. Keys: &#34;Images&#34; . Perfect! . This is it for today. See you in next tutorial... . VERSION . v&#34;1.7.2&#34; .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/julia/environment/images/2022/05/23/Environment-Setup.html",
            "relUrl": "/jupyter/julia/environment/images/2022/05/23/Environment-Setup.html",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Basic Image Processing in Python",
            "content": "Mounting Google Drive . Mounting Google Drive. This is boilerplate code that will mount your Google Drive into you colab space and you will have access to all the files and folders in your Google Drive. . from google.colab import drive drive.mount(&#39;/content/drive/&#39;) . Mounted at /content/drive/ . Next I move into current directory. Since my code is hosted in Colab Notebooks (1) directory so I&#39;ll apply cd (change directory) to move into this folder. . cd &#39;drive/MyDrive/Colab Notebooks (1)/&#39; . The above directory is where all my google colab codes reside. In addition to the code, I also have dataset folder that will contain different datasets of images, text, tables etc. The idea is to have a consistent directroy structure across all my projects i.e., codes in parent folder and datasets in subfolder. . Importing Libraries . import cv2 as cv from google.colab.patches import cv2_imshow # to show images in colab. . Basic Image Display . img = cv.imread(&#39;Dataset/Images/python_logo.png&#39;) # reading image . cv2_imshow(img) # displaying image . The origin of Image is always top-left conrner as oppose to origin of graph (which is bottom left corner). . Images can be visualized/imagined as matrices. In 2D matrices we have rows and columns. We can access these rows and columns by specifying the start and stop numeric values [row_start:row_stop, col_start:col_stop]. . In the following example, we want to display first 500 rows and 500 columns of the image. . cv2_imshow(img[0:500, 0:500]) # showing only top left corner . We can also override the pixel values by assinging any numeric value between 0-255. In following code example . we first create a copy original image | overide the pixel values of first 500 rows and 500 columns by assigning and RGB colour value ( (b,g,r) with range of (0-255,0-255,0-255 ) for each color component. Please note that OpenCV color model is reversed (BGR) | img2 = img.copy() img2[0:500,0:500] = (0,0,255) cv2_imshow(cv.hconcat((img, img2))) # horizontally concatinating the images to see the differences . As seen the original image left is not changed and only copy (on the right) is changed. . We can also show a partial image either by . by cropping image | by showing portion of the image | . img2 = img[0:500,0:500].copy() # cropping image cv2_imshow(cv.hconcat((img[0:500,0:500],img2))) . As seen the left image is partial shown, while the right image is fully shown (albiet it was cropped when copying from original image). .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/python/opencv/image%20processing/2022/05/09/BasicImageProcessing-in-Python.html",
            "relUrl": "/jupyter/python/opencv/image%20processing/2022/05/09/BasicImageProcessing-in-Python.html",
            "date": " • May 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://omergilani.github.io/prog4cm/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://omergilani.github.io/prog4cm/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, My name is Syed Omer Gilani. I am an aspiring educator, avid reader, curious learner, keen programmer, ___ writer, and caring member of a wonderful family. I function as a tenured associate professor at a leading university in Pakistan in my day job. Outside my day job, I mostly read non-fiction, spend quality time with family and friends, and do programming (of mind and computer both!) . I started this blog to share what I have learned over the years and what I am learning now .",
          "url": "https://omergilani.github.io/prog4cm/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://omergilani.github.io/prog4cm/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}